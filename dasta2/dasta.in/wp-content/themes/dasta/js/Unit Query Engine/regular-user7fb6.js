
/*
 *
 * When the OTP form is to be closed
 *
 */
$( document ).on( "close::otp-form", function ( event, data ) {
	$( ".js_otp_form" ).slideUp();
	$( ".js_otp_form" ).get( 0 ).reset();
} );



/*
 *
 * When the lead form is to be reset
 *
 */
$( document ).on( "reset::lead-form", function ( event, data ) {

	$( ".js_lead_form" ).get( 0 ).reset();

	// Set the default country calling code to India (+91)
	$( ".js_phone_calling_code_list option[ value = 'in +91' ]" ).prop( "selected", true );
	$( document ).trigger( "change::phone-calling-code", { callingCode: "in +91" } );
	// Hide the feedback message element
	$( ".js_section_lead_form" ).find( ".js_feeback" ).addClass( "hidden" );

} );



/*
 *
 * When the lead form is to be opened
 *
 */
$( document ).on( "open::lead-form", function ( event, data ) {
	$( ".js_lead_form" ).slideDown();
} );



/*
 *
 * When the EMI calculator is to be closed
 *
 */
$( document ).on( "close::emi-calculator", function ( event, data ) {
	$( ".js_emi_calculator .js_emi_content" ).slideUp();
	$( ".js_emi_calculator .js_emi_toggle" ).addClass( "hidden" );
} );



/*
 *
 * When the Apartment Info section is to be closed
 *
 */
$( document ).on( "close::apartment-info", function ( event, data ) {
	$( ".js_unit_info_container" ).empty();
} );



/*
 *
 * When the enquiry form is to be reset
 *
 */
$( document ).on( "reset::enquiry-form", function ( event ) {

	var $enquiryForm = $( ".js_enquiry_form" )
	$enquiryForm.find( "[ type = 'submit' ]" )
		.text( "Download Pricing PDF" )
		.removeClass( "success" )
		.prop( "disabled", false )
	$enquiryForm.find( ".js_feeback" )
		.text( "" )

} );



/*
 *
 * When the enquiry form is to be opened
 *
 */
$( document ).on( "open::enquiry-form", function ( event, data ) {

	// First, reset the enquiry form
	$( document ).trigger( "reset::enquiry-form" );

	// If the user is not signed-in or authenticated in any form, do not proceed
	var user = __OMEGA__.user;
	// if ( ! user.verified ) return;
	if ( ! user ) return;

	// Reflect the unit in the Enquiry Form heading
	$( ".js_section_enquiry_form .js_unit" ).text( __PRICING_ENGINE__.unitParameters.unit )

	// Pre-fill the enquiry form
	var $enquiryFormSection = $( ".js_section_enquiry_form" );
	$enquiryFormSection.find( "[ name = email ]" ).val( user.email );
	// If a name is available and it does not start with `Unit <digit>`,
	// then fill it in
	var autoGeneratedLeadNamePrefix = __PRICING_ENGINE__.projectConstants[ "Auto Generated Lead Prefix" ];
	if (
		user.name
		&& user.name.indexOf( autoGeneratedLeadNamePrefix ) !== 0
	) {
		$enquiryFormSection.find( "[ name = name ]" ).val( user.name );
		// $enquiryFormSection.find( ".js_username" ).text( "Welcome back, " + user.name.split( /\s/ )[ 0 ] );
	}

	// Finally, reveal the enquiry form
	$( ".js_section_enquiry_form" ).slideDown();

} );



/*
 *
 * When the enquiry form is to be closed
 *
 */
$( document ).on( "close::enquiry-form", function ( event, data ) {
	$( ".js_section_enquiry_form" ).slideUp();
	$( document ).trigger( "reset::enquiry-form" );
} );



/*
 *
 * When a user signs out
 *
 */
$( document ).on( "user::unauthenticate", function ( event ) {
	$( document ).trigger( "close::enquiry-form" );
	$( document ).trigger( "close::emi-calculator" );
	$( document ).trigger( "close::apartment-info" );
	$( document ).trigger( "reset::lead-form" );
	$( document ).trigger( "reset::unit-selection" );
} );



/*
 *
 * When the unit selection is to be reset
 *
 */
$( document ).on( "reset::unit-selection", function ( event ) {

	// Reflect the de-selection on the UI
	// The Floorplan Map
	var $selectedUnit = $( ".js_floorplan_map" ).find( ".js_unit_view.selected" );
	var selectedUnitClassName = $selectedUnit.attr( "class" );
	var newSelectedUnitClassName = selectedUnitClassName
								.replace( /(^|\s)selected(\s|$)/g, " " )
								.trim();
	$selectedUnit.attr( "class", newSelectedUnitClassName );
	// The Unit Listing
	var $selectedUnit = $( ".js_unit_selector" ).find( ".js_unit_view.selected" );
	$selectedUnit.removeClass( "selected" );

	// Reflect the de-selection on the state
	__PRICING_ENGINE__.unitParameters.unit = null;

} );



/*
 *
 * When a user details has been procured
 *
 */
$( document ).on( "user::details", function ( event, data ) {
	//
} );



/*
 *
 * When a floor is selected for the first time, scroll down to the Floor Map
 *
 */
$( document ).one( "change::unit-floor", function ( event, data ) {

	setTimeout( function () {
		window.scroll( { top: $( ".js_floorplan_map" ).position().top - 250, behavior: "smooth" } )
	}, 500 );

} );



/*
 *
 * When the unit type or floor number is changed, reset the phone trap
 *
 */
$( document ).on( "change::unit-type change::unit-floor", function ( event, data ) {

	$( ".js_section_lead_form" ).slideUp();

} );



/*
 *
 * When a unit has been selected; if the user has not been "validated",
 * then show the lead form and scroll down to it.
 *
 * Else proceed to fetch the unit details.
 *
 */
$( document ).on( "select::unit", function ( event, data ) {

	// If the user has not been checked against the CRM ( and TrueCaller in the future )
	if ( ! getLoggedInUser() ) {

		// Show the lead form
		$( ".js_section_lead_form" ).slideDown();

		// Scroll down to it
		setTimeout( function () {
			window.scroll( { top: $( ".js_section_lead_form" ).position().top - 250, behavior: "smooth" } )
		}, 500 );

	}
	else {
		getUnitView( data.unit );
	}

} );



/*
 *
 * On submitting the lead form
 *
 */
$( document ).on( "change", ".js_phone_calling_code_list", function ( event ) {
	var callingCode = $( event.target ).val();
	$( document ).trigger( "change::phone-calling-code", { callingCode, callingCode } );
} );
$( document ).on( "change::phone-calling-code", function ( event, data ) {

	var callingCode = data.callingCode;
	$( ".js_phone_calling_code" ).text( callingCode );

} );



/*
 *
 * On submitting the lead form
 *
 */

$( document ).one( "load::spreadsheet", function ( event, workbook ) {

	$( ".js_lead_form" ).on( "submit", function ( event ) {

		event.preventDefault();

		var $form = $( event.target );
		var $enquiryForm = $( ".js_enquiry_form" );

		// Pull data from the form
		var $phoneCallingCode = $form.find( "[ name = 'phoneCallingCode' ]" );
		var $phoneNumber = $form.find( "[ name = 'phoneNumber' ]" );

		// Sanitize and Validate the data
		$form.removeClass( "js_error" );
		$phoneNumber.val( $phoneNumber.val().replace( /[^-â€“+\d\s]/g, "" ) );
		if ( $phoneNumber.val().replace( /\D/g, "" ).length < 10 ) {
			$form.addClass( "js_error" );
			$phoneNumber.parent().addClass( "validation-error" );
		}
		var phoneCallingCode = $phoneCallingCode.val().replace( /[^+\d]/g, "" );
		var phoneNumber = $phoneNumber.val().replace( /\D/g, "" );
		var fullPhoneNumber = phoneCallingCode + phoneNumber;

		// Store these values in the global state
		__OMEGA__.user = __OMEGA__.user || { };
		__OMEGA__.user.phoneCallingCode = phoneCallingCode;
		__OMEGA__.user.phoneNumber = fullPhoneNumber;


		if ( $form.hasClass( "js_error" ) ) {
			return;
		}

		// Hide the form itself, and show the feedback message
		$( ".js_lead_form" ).slideUp();
		$( ".js_section_lead_form .js_feeback" ).removeClass( "hidden" );

		// Give feeback to the user saying that the unit is being fetched
		// $( ".js_unit_selector .js_feeback" ).removeClass( "hidden" )

		getLead( fullPhoneNumber );

	} );

} );


function getLead ( phoneNumber ) {

	var $leadForm = $( ".js_lead_form" );
	var $enquiryForm = $( ".js_enquiry_form" );

	// Build the payload
	var requestPayload = {
		phoneNumber: phoneNumber
	};

	// Fetch the lead based on the phone number
	var ajaxRequest = $.ajax( {
		url: "http://dasta.omega.lazaro.in/get-user-by-phone",
		method: "POST",
		data: requestPayload,
		dataType: "json"
	} );
	ajaxRequest.done( function ( response ) {
		// if ( typeof response != "object" ) return;
		// console.log( response )
		// console.log( "ya baba!" );
		if ( response.code == 2 ) {
			// If the lead don't exist, verify the user
			$( document ).trigger( "verify::user", { phoneNumber: phoneNumber } );
			return;
		}

		$leadForm.find( "[ type = 'submit' ]" )
			.addClass( "success" )
			// .text( "Downloading..." )
			// .prop( "disabled", true )

		// Store the user data in the global state
		var userData = {
			verified: true,
			id: response.data.id,
			firstName: response.data.firstName,
			name: response.data.name,
			email: response.data.email,
			phoneNumber: requestPayload.phoneNumber
		};
		__OMEGA__.user = userData;

		// Authenticate the user
		$( document ).trigger( "user::authenticated", {
			verified: true,
			id: userData.id
		} );

		// Broadcast the user data
		$( document ).trigger( "user::details", userData );

		// $leadForm.find( ".js_feeback" ).text( "Welcome, " + response.data.name )

		// Mark the user as "validated"
		__OMEGA__.validatedUser = true;
		// Get the unit view
		getUnitView( __PRICING_ENGINE__.unitParameters.unitId );
		// Show the enquiry form
		// $( ".js_section_enquiry_form" ).slideDown();
		$( document ).trigger( "open::enquiry-form" )

	} );

}

/*
 * If the user is not in the system,
 * Verify the phone number first via OTP, then create the lead.
 */
$( document ).on( "verify::user", function ( event, data ) {
	sendOTP( data.phoneNumber );
} );


function sendOTP ( phoneNumber ) {

	var verificationFlow = $.ajax( {
		url: "http://dasta.omega.lazaro.in/user-send-otp",
		data: { phoneNumber: phoneNumber }
	} );

	verificationFlow.done( function ( response ) {
		if ( response.Status.toLowerCase() != "success" ) {
			// Log error somewhere
			return;
		};
		// Store OTP session for later
		__OMEGA__.user = __OMEGA__.user || { };
		__OMEGA__.user.otpSessionId = response.Details;

		/*
		 * Show the OTP form
		 */
		// Hide the feedback message
		$( ".js_section_lead_form .js_feeback" ).addClass( "hidden" );
		// Hide the lead form
		$( ".js_lead_form" ).slideUp();
		// Show the OTP form
		$( ".js_otp_form" ).slideDown();
		$( ".js_otp_form" ).find( "[ name = 'otp' ]" ).get( 0 ).focus();
	} );

	return verificationFlow;

}

$( ".js_try_another_number" ).on( "click", function () {
	event.preventDefault();
	$( document ).trigger( "reset::lead-form" );
	$( document ).trigger( "open::lead-form" );
	$( document ).trigger( "close::otp-form" );
} );

$( ".js_otp_form" ).on( "submit", function ( event ) {

	event.preventDefault();

	var $form = $( event.target );

	/*
	 * Pull data from the form
	 */
	var otp = $form.find( "[ name = 'otp' ]" ).val();

	/*
	 * Pull data from other places
	 */
	var otpSessionId = __OMEGA__.user.otpSessionId;

	/*
	 * Verify the OTP
	 */
	// verifyOTP( otpSessionId, otp );
	verifyOTP( otp, otpSessionId, function ( e ) {

		if ( e ) {
			alert( e );
			$form.find( "input, select, button" ).prop( "disabled", false );
			return;
		}

		$( document ).trigger( "verified::user" );

	} );

} );

function verifyOTP ( otp, sessionId, callback ) {

	var verificationFlow = $.ajax( {
	    url: "http://dasta.omega.lazaro.in/user-verify-otp",
	    data: { otp: otp, otpSessionId: sessionId }
	} );

	verificationFlow.done( function ( response ) {
	    if ( response.Status.toLowerCase() != "error" ) {
	        callback();
	        return;
	    }
	    var responseErrorMessage = response.Details.toLowerCase();
	    if ( /mismatch/.test( responseErrorMessage ) ) {
	        callback( "The OTP you have provided does not match. Please try again." );
	    }
	    else if ( /combination/.test( responseErrorMessage ) ) {
	        callback( "The OTP you have provided does not match. Please try again." );
	    }
	    else if ( /expire/.test( responseErrorMessage ) ) {
	        callback( "The OTP you have provided has expired. Please try again." );
	    }
	    else if ( /missing/.test( responseErrorMessage ) ) {
	        callback( "You haven't provided an OTP. Please try again." );
	    }
	    else {
	        callback( response.Details );
	    }
	} );
	verificationFlow.fail( function ( response ) {
	    callback( "The OTP you provided does not match the one we sent you." );
	} )

}

/*
 * If the user (by that, we mean his/her phone number) has been verified,
 * Create a lead.
 */
$( document ).on( "verified::user", function ( event, data ) {
	var phoneNumber = __OMEGA__.user.phoneNumber;
	createLead( phoneNumber );
	// Trigger a URL with the context
	openPage( "total-price" );
} );




function createLead ( phoneNumber ) {

	// If a phone number is not passed in, do not proceed
	if ( ! phoneNumber.trim() ) return;

	var $leadForm = $( ".js_lead_form" );
	var $enquiryForm = $( ".js_enquiry_form" );

	// Get the current timestamp
	var timestampAjaxRequest = $.ajax( "http://dasta.omega.lazaro.in/get-date-and-time", { dataType: "json" } );
	timestampAjaxRequest.done( function ( response ) {

		// Do a re-calculation
		var unitParameters = __PRICING_ENGINE__.unitParameters;
		unitParameters.timestamp = response.timestamp;
		unitParameters.phoneNumber = __OMEGA__.user.phoneNumber;
		__PRICING_ENGINE__.unitData = getComputedApartmentDetails(
			__PRICING_ENGINE__.workbook,
			unitParameters
		);

		// Build the payload
		var requestPayload = {
			phoneNumber: phoneNumber,
			unit: __PRICING_ENGINE__.unitData.unit,
			firstName: __PRICING_ENGINE__.unitData.lead_implicit_first_name,
			lastName: __PRICING_ENGINE__.unitData.lead_implicit_last_name
		};

		// Fetch the lead based on the phone number
		var createLeadAjaxRequest = $.ajax( {
			url: "http://dasta.omega.lazaro.in/create-lead",
			method: "POST",
			data: requestPayload
		} );
		createLeadAjaxRequest.done( function ( response ) {

			// Mark the user as "validated"
			var userData = {
				verified: true,
				id: response.data.id,
				phoneNumber: phoneNumber
			};
			__OMEGA__.user = userData;

			// Authenticate the user
			$( document ).trigger( "user::authenticated", {
				verified: true,
				id: response.data.id
			} );

		} );
		// Why "always"?
		createLeadAjaxRequest.always( function () {

			// Re-enable the input fields
			// $leadForm.find( "input, select, textarea" ).prop( "disabled", false );

			// Reflect the data in the enquiry form
			// $enquiryForm.find( "[ name = phoneNumber ]" ).val( requestPayload.phoneNumber );

			// Hide the loading indicator
			// Fill in this space

			// Get the unit view
			getUnitView( __PRICING_ENGINE__.unitParameters.unitId );

			// Show the enquiry form
			$( ".js_section_enquiry_form" ).slideDown();

		} );

	} );

}



/*
 *
 * When markup for a unit has been fetched and plonked for the first time,
 * it is implied that the user went throught the lead form.
 *
 * So now, it can be hidden; primarily the part that holds a status message
 * saying that a unit is being fetched.
 *
 */
$( document ).on( "load::unit-view", function ( event ) {

	$( ".js_section_lead_form" ).slideUp();

} );



/*
 *
 * When markup for a unit has been fetched and plonked,
 * if the user has been verified, show the enquiry form
 *
 */
$( document ).on( "load::unit-view", function ( event ) {

	$( document ).trigger( "open::enquiry-form" );

} );



/*
 *
 * When markup for a unit has been fetched and plonked for the first time,
 * scroll down to the that section.
 *
 */
$( document ).one( "load::unit-view", function ( event ) {

	setTimeout( function () {
		window.scroll( { top: $( ".js_unit_info" ).position().top - 250, behavior: "smooth" } )
	}, 500 );

} );



/*
 *
 * When markup for a unit has been fetched and plonked,
 * the enquiry form needs to be reset.
 *
 */
// $( document ).on( "load::unit-view", function ( event ) {

// 	// Reflect the unit in the Enquiry Form heading
// 	$( ".js_section_enquiry_form .js_unit" ).text( __PRICING_ENGINE__.unitParameters.unit )

// 	var $enquiryForm = $( ".js_enquiry_form" )
// 	$enquiryForm.find( "[ type = 'submit' ]" )
// 		.text( "Download Pricing PDF" )
// 		.removeClass( "success" )
// 		.prop( "disabled", false )
// 	$enquiryForm.find( ".js_feeback" )
// 		.text( "" )

// } );



/*
 *
 * On tweaking with the modifications, reset the enquiry form
 *
 */

$( document ).on( "change::grand-total", function ( event ) {
	$( document ).trigger( "reset::enquiry-form" );
} );





/*
 *
 * On submitting the enquiry form
 *
 */
// First, get the current timestamp from the server
$( ".js_enquiry_form" ).on( "submit", function ( event ) {

	event.preventDefault();

	var $form = $( event.target );
	var $apartmentModsForm = $( ".js_unit_mods" );

	// Disable the interface
	// Fill in this space

	$form.removeClass( "js_error" );
	// Get data from the form
	var $name = $form.find( "[ name = name ]" )
	// var $phoneNumber = $form.find( "[ name = phoneNumber ]" )
	var $email = $form.find( "[ name = email ]" )
	var $discoverySource = $form.find( "[ name = discoverySource ]" )

	// Validate the data
	if ( ! $name.val().trim() ) {
		$form.addClass( "js_error" );
		$name.parent().addClass( "validation-error" );
	}
	// $phoneNumber.val( $phoneNumber.val().replace( /[^-â€“+\d\s]/g, "" ) );
	// if ( $phoneNumber.val().replace( /\D/g, "" ).length < 8 ) {
	// 	$form.addClass( "js_error" );
	// 	$phoneNumber.parent().addClass( "validation-error validation-msg-required" );
	// }
	if ( ! $email.val().trim() ) {
		$form.addClass( "js_error" );
		$email.parent().addClass( "validation-error validation-msg-required" );
	}

	if ( $form.hasClass( "js_error" ) ) {
		// Re-enable the interface
		// Fill in this space
		return;
	}

	// Get the timestamp
	$.get( "http://dasta.omega.lazaro.in/get-date-and-time", function ( response ) {

		// Do a re-calculation
		var unitParameters = __PRICING_ENGINE__.unitParameters;
		unitParameters.timestamp = response.timestamp;
		unitParameters.phoneNumber = __OMEGA__.user.phoneNumber;
		unitParameters.name = $name.val();
		unitParameters.email = $email.val();
		__PRICING_ENGINE__.unitData = getComputedApartmentDetails(
			__PRICING_ENGINE__.workbook,
			unitParameters
		);

		$( document ).trigger( "submit:enquiry-form" );

	}, "json" );

} );

$( document ).on( "submit:enquiry-form", function ( event ) {

	var $form = $( ".js_enquiry_form" );

	/* -- Build the request payload -- */
	var requestPayload = { };
	// Get data from the form
	$form.find( "[ name ]" ).each( function ( _i, el ) {
		var $el = $( el );
		requestPayload[ $el.attr( "name" ) ] = $el.val();
	} )
	var unitParameters = __PRICING_ENGINE__.unitParameters;
	for ( var p in unitParameters ) {
		requestPayload[ p ] = unitParameters[ p ];
	}
	var unitData = __PRICING_ENGINE__.unitData;
	for ( var p in unitData ) {
		requestPayload[ p ] = unitData[ p ];
	}
	requestPayload._engineVersion = __PRICING_ENGINE__.projectConstants.Version

	// Show the processing indicator
	// Fill in this space

	// Make the request
	var ajaxRequest = $.ajax( {
		url: "http://dasta.omega.lazaro.in/enquiries",
		method: "POST",
		data: requestPayload,
		xhrFields: {
			withCredentials: true
		}
	} )
	.done( function ( response ) {
		var responseFormatted;
		if ( typeof response != "object" ) {
			try {
				responseFormatted = JSON.parse( response )
			} catch ( e ) {
				responseFormatted = response
			}
		}
		else {
			responseFormatted = response;
		}
		console.log( responseFormatted )
		if ( typeof responseFormatted != "object" ) return;

		// Set the global user state
		__OMEGA__.user = {
			verified: true,
			name: requestPayload.name,
			email: requestPayload.email,
			phoneNumber: requestPayload.phoneNumber
		}

		// Authenticate the user
		// NOT BEING USED
		// $( document ).trigger( "user::authenticated", {
		// 	verified: true,
		// 	name: requestPayload.name,
		// 	email: requestPayload.email,
		// 	phoneNumber: requestPayload.phoneNumber
		// } );

		// Reflect the status in the UI
		console.log( "ya baba!" );
		$form.find( "[ type = 'submit' ]" )
			.addClass( "success" )
			.text( "Thank you!" )
			.prop( "disabled", true )
		$form.find( ".js_feeback" ).text( "Check your mail in a bit." )
	} )
	.fail( function ( jqXHR ) {
		var responseFormatted;
		try {
			responseFormatted = JSON.parse( jqXHR.statusText )
		} catch ( e ) {
			responseFormatted = jqXHR.statusText;
		}
		console.log( responseFormatted )

		if ( jqXHR.status == 401 ) {
			alert( jqXHR.responseText )
			return;
		}

		console.log( "noihee!" );
		$form.find( "[ type = 'submit' ]" )
			.text( "Try again" )
		$form.find( ".js_feeback" ).text( "Something went wrong! Try again in a little bit." )
	} )
	.always( function () {

		// Re-enable the input fields
		$form.find( "input, select, textarea" ).prop( "disabled", false );

		// Hide the loading indicator
		// Fill in this space

	} )

} );



/*
 *
 * Default UI state
 *
 */
$( document ).one( "load::spreadsheet", function ( event, workbook ) {

	// Apartment Type â†’ 2BHK
	$( ".js_unit_type:nth-child(2)" ).trigger( "click" );
	// $( document ).trigger( "change::unit-floor", { firstTime: true } );

	// Set the default country calling code to India (+91)
	$( document ).trigger( "reset::lead-form" );

} );
